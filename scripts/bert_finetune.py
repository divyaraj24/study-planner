# -*- coding: utf-8 -*-
"""BERT_finetune.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13hHdoTayY8TI6fzmbBIvNOqBDSD4NKax
"""

import torch

if torch.cuda.is_available():

    device = torch.device("cuda")

    print('There are %d GPU(s) available.' % torch.cuda.device_count())

    print('We will use the GPU:', torch.cuda.get_device_name(0))

else:
    print('No GPU available, using the CPU instead.')
    device = torch.device("cpu")

!pip install transformers==4.17

from datasets import load_dataset

from transformers import AutoTokenizer, BertForSequenceClassification, Trainer, TrainingArguments

from google.colab import files
uploaded = files.upload()
import pandas as pd

df = pd.read_csv("study_planner_4class.csv")
df["label"] = df["label"].map({
    "Exam": 0,
    "Project": 1,
    "Mastery": 2,
    "Unidentified": 3
})

from sklearn.model_selection import train_test_split

train_texts, val_texts, train_labels, val_labels = train_test_split(
    df["text"].tolist(), df["label"].tolist(), test_size=0.2, stratify=df["label"]
)

from transformers import BertTokenizer

tokenizer = BertTokenizer.from_pretrained("bert-base-uncased")

train_encodings = tokenizer(train_texts, truncation=True, padding=True, max_length=128)
val_encodings = tokenizer(val_texts, truncation=True, padding=True, max_length=128)

import torch

class StudyDataset(torch.utils.data.Dataset):
    def __init__(self, encodings, labels):
        self.encodings = encodings
        self.labels = labels

    def __getitem__(self, idx):
        item = {key: torch.tensor(val[idx]) for key, val in self.encodings.items()}
        item["labels"] = torch.tensor(self.labels[idx])
        return item

    def __len__(self):
        return len(self.labels)

train_dataset = StudyDataset(train_encodings, train_labels)
val_dataset = StudyDataset(val_encodings, val_labels)

import os
os.environ["WANDB_DISABLED"] = "true"
from transformers import BertForSequenceClassification, Trainer, TrainingArguments

model = BertForSequenceClassification.from_pretrained("bert-base-uncased", num_labels=4)

training_args = TrainingArguments(
    output_dir="./results",
    num_train_epochs=4,
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    evaluation_strategy="epoch",
    save_strategy="epoch",
    logging_dir="./logs",
    logging_steps=10,
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=val_dataset
)


# Train!
trainer.train()

metrics = trainer.evaluate()
print(metrics)

# Save the model and tokenizer locally
model.save_pretrained("bert_study_model")
tokenizer.save_pretrained("bert_study_model")

!zip -r bert_study_model.zip bert_study_model

from google.colab import files
files.download("bert_study_model.zip")